name: Draft Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'The name of the tag.'
        required: true
  push:
    tags:
      - "v*"

jobs:
  draft-release:
    name: Draft Release ${{ github.event.inputs.tag_name || github.ref }}
    runs-on: ubuntu-latest
    env:
      version: ${{ github.event.inputs.tag_name || github.ref }}

    steps:
      - uses: actions/checkout@v2

      # Uses commits with "git log" to mount the body of the release.
      # ex: """
      # d17a4a3 - (JohnDoe) Add more comments to release workflow
      # I added somes comments.
      # c1f1748 - (JohnDoe) Commiting more things
      # """
      - name: Mount Body
        id: mount_body
        run: |
          git log \
          --pretty=format:"%h - (%an) %s %n%b" \
          --no-merges \
          $((git describe --tags --abbrev=0 && echo ..) | sed '$!N; s/\n//')HEAD \
          | awk 'NF' \
          > CHANGES.txt

      - name: Create Release
        id: create_release # Optional if not referenced by another step.
        uses: actions/create-release@v1 # Warning: This actions is deprecated. See the repo for more details.
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ env.version }}
          release_name: Release ${{ env.version }}
          body_path: CHANGES.txt
          draft: true # Recommend always true, to validate the release manualy before publish it.

      - name: Upload Build on Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
          asset_path: ./CHANGES.txt # Obviously you must replace the file
          asset_content_type: application/txt # Search for your MIME type if you need. Recommend do not upload jar. ex: "../gzip" instead of "../zip"